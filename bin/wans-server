#!/usr/bin/env node

const commander = require('commander'),
    chalk = require('chalk'),
    path = require('path'),
    fs = require('fs'),
    fileUtil = require('../lib/util/fileUtil'),
    httpServer = require('../lib/core/http-server'),
    progress = require('../lib/util/progress'),
    Config = require('../lib/core/config'),
    help = require('../lib/util/helpLogger'),
    logger = require('../lib/util/logger').createLogger({prefix: '@wans/cli/server'});

/**
 * 帮助
 */
commander.on('--help', () => {
    help.l1.print();
    help.l1.print(`wans server  ${chalk.cyan('<?wans.config.js>')}`);
    help.l2.print('1. 不指定配置文件时，默认在根目录获取wans.config.js文件配置');
    help.l2.print('2. wans.config.js配置选项如下：');
    help.l3.print('port', `端口号 {number} ,必填项`);
    help.l3.print('root', `根目录 {string}，必填项`);
    help.l3.print('cache', `缓存设置，单位秒 {number}`);
    help.l3.print('headers', `请求头设置 {object}`);
    help.l3.print('ssl', `ssl证书设置 {object {cert:string, key:string}}`);
    help.l3.print('cors', `跨域设置 {boolean}`);
    help.l3.print('local', `本地静态资源重定向 {object},采用软链接的方式`);
    help.l3.print('proxy', `代理服务器配置 {object|string}`);
    help.l3.print('','1. 当为字符串时，即代理服务器的地址配置');
    help.l3.print('','2. 当为对象时，必须有[target]用以表示代理服务器地址，其他配置会作为reqest参数设置，比如headers');
    help.l3.print('router', `路由设置 {object}，example:`);
    help.l4.print('{');
    help.l5.print(`'api/xx': {`);
    help.l6.print(`// post...`);
    help.l6.print(`// put...`);
    help.l6.print(`// delete...`);
    help.l6.print('get: function(req, res, query) {');
    help.l7.print(`res.end('end')`);
    help.l6.print('}');
    help.l5.print('}');
    help.l4.print('}');
    help.l3.print('testJsonDir', `测试json目录 {string}`);
    help.l3.print('proxySave', '是否保存代理生成的数据 {boolean},需配合testJsonDir使用');
    help.l3.print('','proxySave会根据请求动态生成数据文件，同时会生成请求映射关系 manifest.json');
    help.l3.print('useManifest', '是否使用manifest来配置代理信息 {boolean}');
    help.l3.print('','使用mainfest.json配置文件来控制代理请求，example')
    help.l3.print('',`
        {
            '/api/xx/xx': {
                get: {
                    query: {
                        name: 'wannasky'
                    },
                    file: '__test/api/xx/xx.json'
                }
            }
        }
    `)
    help.l1.print(`wans server ${chalk.cyan('clean')}`);
    help.l2.print('清除建立server时产生的symlink');
});

commander.parse(process.argv);

let config = Config.createConfig(commander.args[0]);

//特殊指令处理
switch (commander.args[0]) {
    case 'clean':
        cleanServer();
        break;
    default:
        createServer();
}

//建立server
function createServer () {
    if(!config.has('port')){
        logger.error('请指定代理服务器端口号');
        return;
    }
    if(!config.has('root')){
        logger.error('请指定代理服务器根目录');
        return;
    }
    let server = httpServer.createServer(config.get());
    server.listen(server.port, () => {
        logger.success('服务器启动成功,端口号：', server.port);
    });
}

//删除指定目录下的软链接
function removeSymLink (directory) {
    let links = fileUtil.filter(directory, stat => stat.isSymbolicLink());
    try {
        links.forEach(link => {
            fs.unlinkSync(link);
            logger.debug(link,'已删除');
        });
    } catch (error) {
        logger.error('软链接删除失败');
    }
}

//删除创建server后的软链接
function cleanServer  () {
    let cwd = process.cwd();
    const removeProgressDefault = () => {
        let pp = progress.create({repeatTotal: 100, loadMessage: '---2s后删除当前目录下的所有软链接'});
        pp.start(2000, () => {
            removeSymLink(cwd);
        });
    }

    if(config.has('local')){
        logger.debug('存在local 配置项，2s后删除所配置的软链接');
        let pp = progress.create({repeatTotal: 100, repeatMessage:'--', loadMessage: '-'});
        pp.start(2000, () => {
            let targetPath;
            for(let key in config.get('local')){
                targetPath = path.normalize(path.join(cwd, config.get('root'), key));
                try{
                    fs.readlinkSync(targetPath);
                    fs.unlinkSync(targetPath);
                    logger.debug(targetPath,'已删除');
                }catch(err){

                }
            }
        });
    }else{
        removeProgressDefault();
    }
}
